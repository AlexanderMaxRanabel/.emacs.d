(setq company-statistics--scores #s(hash-table size 400 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("var/recentf-save.el" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/var/undo-tree-hist/" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "save-interprogram-paste-before-kill" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-default") . 1) (emacs-lisp-mode . 1) (nil . 1)) "save-place" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-default") . 1) (emacs-lisp-mode . 1) (nil . 1)) "save-place-mode" (((:file "/home/raxit/.emacs") . 3) ((:keyword "setq-default") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "setq") . 1)) ":init" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "use-package") . 1)) "close" (((:file "/home/raxit/wrx/org/evil_user.org") . 1) (org-mode . 1) (nil . 1)) "fold" (((:file "/home/raxit/wrx/org/evil_user.org") . 1) (org-mode . 1) (nil . 1)) "delete-forward-char" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "leave" ((doctor-mode . 1) (nil . 1)) "comment-or-uncomment-region" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-battery-charging" (((:file "/home/raxit/.emacs") . 7) ((:keyword "setq") . 7) (emacs-lisp-mode . 7) (nil . 7)) "doom-modeline-battery-full" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-battery-normal" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-battery-critical" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-battery-error" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline" (((:file "/home/raxit/.emacs") . 6) ((:keyword "setq") . 3) (emacs-lisp-mode . 6) (nil . 6) ((:keyword "use-package") . 3)) "doom-modeline-warning" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-highlight" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "find-file-visit-truename" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-major-mode-color-icon" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "function" (((:file "/home/raxit/.emacs") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "reload" (((:file "/home/raxit/.emacs") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "transparency" (((:file "/home/raxit/.emacs") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "Company" (((:file "/home/raxit/.emacs") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "push_back" (((:file "/home/raxit/wrx/hello.cpp") . 1) ((:symbol "nil") . 1) ((:keyword "for") . 1) (c++-mode . 1) (nil . 1)) "sort" (((:file "/home/raxit/wrx/hello.cpp") . 1) ((:keyword "for") . 1) (c++-mode . 1) (nil . 1)) "for_each" (((:file "/home/raxit/wrx/hello.cpp") . 2) ((:keyword "return") . 2) (c++-mode . 2) (nil . 2)) "beginend" (((:file "/home/raxit/wrx/hello.cpp") . 2) ((:symbol "v") . 2) ((:keyword "return") . 2) (c++-mode . 2) (nil . 2)) "explanation" (((:file "/home/raxit/wrx/org/emacs menual.org") . 1) (org-mode . 1) (nil . 1)) "require" (((:file "/home/raxit/wrx/org/emacs menual.org") . 1) (org-mode . 1) (nil . 1)) "ifdef" (((:file "/home/raxit/wrx/hello.cpp") . 1) ((:keyword "return") . 1) (c++-mode . 1) (nil . 1)) "company-rtags" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "use-package" (((:file "/home/raxit/.emacs") . 3) ((:keyword "use-package") . 2) (emacs-lisp-mode . 3) (nil . 3) ((:keyword "require") . 1)) "setq-default" (((:file "/home/raxit/.emacs") . 1) ((:keyword "with-eval-after-load") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-wordfreq" (((:file "/home/raxit/.emacs") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-c-headers" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "cout" (((:file "/home/raxit/wrx/apple.cpp") . 2) ((:keyword "else") . 2) (c++-mode . 2) (nil . 2)) "company-complete" (((:file "/home/raxit/.emacs") . 5) ((:keyword "use-package") . 5) (emacs-lisp-mode . 5) (nil . 5)) "notes" (((:file "/home/raxit/.emacs.d/snippets/org-mode/me.org") . 1) (org-mode . 1) (nil . 1)) "ivy-calling" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "previous" (((:file "/home/raxit/.emacs") . 1) ((:keyword "defun") . 1) (emacs-lisp-mode . 1) (nil . 1)) "counsel--call" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "counsel-irony" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "global-set-key" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-avy" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-hydra" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-reverse-i-search-map" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":bind" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "avy-goto-char" (((:file "/home/raxit/.emacs") . 2) ((:keyword "use-package") . 2) (emacs-lisp-mode . 2) (nil . 2)) "avy-goto-line" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "avy-goto-word-0" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "avy-resume" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-abbrev" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-shell-delete-duplicates" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "setq-local" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "delete-dups" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-local") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-file--keys-match-p" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-local") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-files" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-local") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":sepa" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-local") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":separate" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-local") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-dabbrev" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-local") . 1) (emacs-lisp-mode . 1) (nil . 1)) "add-hook" (((:file "/home/raxit/.emacs") . 2) ((:keyword "push") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "lambda") . 1)) "org-mode-hook" (((:file "/home/raxit/.emacs") . 2) ((:keyword "push") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "lambda") . 1)) "teddy-ma/org-buffer-setup" (((:file "/home/raxit/.emacs") . 1) ((:keyword "push") . 1) (emacs-lisp-mode . 1) (nil . 1)) "my/org-mode/load-prettify-symbols" (((:file "/home/raxit/.emacs") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "load" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "load-theme" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "emojify-apropos-emoji" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "emojify-insert-emoji" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "always" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell-aliases-file" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/var/undo-tree-hist" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/var/eshell/" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "~/.emacs.d/var/" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/var/eshell" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "eshell-directory-files" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/var/eshell/aliases" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell-directory-name" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "concat" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "user-emacs-directory" (((:file "/home/raxit/.emacs") . 4) ((:keyword "setq") . 4) (emacs-lisp-mode . 4) (nil . 4)) "ivy-define-key" (((:file "/home/raxit/.emacs") . 1) ((:keyword "lambda") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell-previous-prompt" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell-previous-input-string" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "eshell-previous-input" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":config" (((:file "/home/raxit/.emacs") . 4) ((:keyword "use-package") . 4) (emacs-lisp-mode . 4) (nil . 4)) "solaire-mode" (((:file "/home/raxit/.emacs") . 1) ((:keyword "require") . 1) (emacs-lisp-mode . 1) (nil . 1)) "uptime" ((eshell-mode . 2) (nil . 2)) "zathura" ((eshell-mode . 1) (nil . 1)) "smooth-scroll" ((eshell-mode . 1) (nil . 1)) "counsel" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "swiper-isearch" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "pkg" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ibuffer" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":custom" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "ivy-posframe-border-width" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "title" (((:file "/home/raxit/.config/yt-dlp/config") . 1) (conf-space-mode . 1) (nil . 1)) "playlist_index" (((:file "/home/raxit/.config/yt-dlp/config") . 1) (conf-space-mode . 1) (nil . 1)) "default" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-yasnippet" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "company-complete-common-or-cycle" (((:file "/home/raxit/.emacs") . 1) ((:keyword "interactive") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-modeline-mode" (((:file "/home/raxit/.emacs") . 3) ((:keyword "use-package") . 3) (emacs-lisp-mode . 3) (nil . 3)) "after-init" (((:file "/home/raxit/.emacs") . 2) ((:keyword "use-package") . 2) (emacs-lisp-mode . 2) (nil . 2)) "display-battery-mode" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "display-time-default-load-average" (((:file "/home/raxit/.emacs") . 1) ((:keyword "with-temp-buffer") . 1) (emacs-lisp-mode . 1) (nil . 1)) "display-time-format" (((:file "/home/raxit/.emacs") . 1) ((:keyword "with-temp-buffer") . 1) (emacs-lisp-mode . 1) (nil . 1)) "display-time-mode" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "~/.emacs.d/var/savehist.el" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "tool-bar-mode" (((:file "/home/raxit/.emacs") . 1) ((:keyword "when") . 1) (emacs-lisp-mode . 1) (nil . 1)) "after-focus-change-function" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) ".emacs" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq-default") . 1) (emacs-lisp-mode . 1) (nil . 1)) "font-lock-comment-face" (((:file "/home/raxit/.emacs") . 2) ((:keyword "cond") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "setq") . 1)) ":family" (((:file "/home/raxit/.emacs") . 5) ((:keyword "cond") . 2) (emacs-lisp-mode . 5) (nil . 5) ((:keyword "setq") . 3)) ":height" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) "italic" (((:file "/home/raxit/.emacs") . 4) ((:keyword "cond") . 3) (emacs-lisp-mode . 4) (nil . 4) ((:keyword "setq") . 1)) "Cantarell-Oblique" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) "font-spec" (((:file "/home/raxit/.emacs") . 3) ((:keyword "setq") . 3) (emacs-lisp-mode . 3) (nil . 3)) "Fantasque" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "progn") . 1)) "Sans" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "progn") . 1)) "Mono" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 1) (emacs-lisp-mode . 2) (nil . 2) ((:keyword "dolist") . 1)) "Fira" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "Monaco-9" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":size" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "doom-themes" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "doom-themes-enable-bold" (((:file "/home/raxit/.emacs") . 2) ((:keyword "setq") . 2) (emacs-lisp-mode . 2) (nil . 2)) "doom-themes-enable-italic" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "custom" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "custom-set-faces" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":custom-face" (((:file "/home/raxit/.emacs") . 1) ((:keyword "setq") . 1) (emacs-lisp-mode . 1) (nil . 1)) "Oblique" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) ":slant" (((:file "/home/raxit/.emacs") . 2) ((:keyword "cond") . 2) (emacs-lisp-mode . 2) (nil . 2)) ":weight" (((:file "/home/raxit/.emacs") . 2) ((:keyword "cond") . 2) (emacs-lisp-mode . 2) (nil . 2)) "medium" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) "set-face-attribute" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) "font-lock-add-keywords" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) "bold" (((:file "/home/raxit/.emacs") . 1) ((:keyword "cond") . 1) (emacs-lisp-mode . 1) (nil . 1)) "printf" (((:file "/home/raxit/wrx/hello.cpp") . 1) ((:keyword "for") . 1) (c++-mode . 1) (nil . 1)) "undo-tree" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "undo-tree-mode" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "recentf-max-menu-items" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "font-face-attributes" (((:file "/home/raxit/.emacs") . 1) ((:keyword "use-package") . 1) (emacs-lisp-mode . 1) (nil . 1)) "JetBrains" (((:file "/home/raxit/.emacs") . 1) ((:keyword "dolist") . 1) (emacs-lisp-mode . 1) (nil . 1)))) company-statistics--log [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ("var/recentf-save.el" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/undo-tree-hist/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("save-interprogram-paste-before-kill" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/raxit/.emacs") . 1)) ("save-place" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/raxit/.emacs") . 1)) ("save-place-mode" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq-default") . 1) ((:file "/home/raxit/.emacs") . 2)) ("save-place-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":init" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("save-place-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/raxit/.emacs") . 1)) ("close" (nil . 1) (org-mode . 1) ((:file "/home/raxit/wrx/org/evil_user.org") . 1)) ("fold" (nil . 1) (org-mode . 1) ((:file "/home/raxit/wrx/org/evil_user.org") . 1)) ("delete-forward-char" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("leave" (nil . 1) (doctor-mode . 1)) ("comment-or-uncomment-region" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-charging" (nil . 6) (emacs-lisp-mode . 6) ((:keyword "setq") . 6) ((:file "/home/raxit/.emacs") . 6)) ("doom-modeline-battery-charging" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-full" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-charging" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-normal" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-charging" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-critical" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-charging" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-error" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "setq") . 3) ((:file "/home/raxit/.emacs") . 3)) ("doom-modeline" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-warning" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-highlight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("find-file-visit-truename" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-charging" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-major-mode-color-icon" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/raxit/.emacs") . 1)) ("reload" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/raxit/.emacs") . 1)) ("transparency" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Company" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/raxit/.emacs") . 1)) ("push_back" (nil . 1) (c++-mode . 1) ((:keyword "for") . 1) ((:symbol "nil") . 1) ((:file "/home/raxit/wrx/hello.cpp") . 1)) ("sort" (nil . 1) (c++-mode . 1) ((:keyword "for") . 1) ((:file "/home/raxit/wrx/hello.cpp") . 1)) ("for_each" (nil . 2) (c++-mode . 2) ((:keyword "return") . 2) ((:file "/home/raxit/wrx/hello.cpp") . 2)) ("beginend" (nil . 2) (c++-mode . 2) ((:keyword "return") . 2) ((:symbol "v") . 2) ((:file "/home/raxit/wrx/hello.cpp") . 2)) ("for_each" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:file "/home/raxit/wrx/hello.cpp") . 1)) ("beginend" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:symbol "v") . 1) ((:file "/home/raxit/wrx/hello.cpp") . 1)) ("explanation" (nil . 1) (org-mode . 1) ((:file "/home/raxit/wrx/org/emacs menual.org") . 1)) ("require" (nil . 1) (org-mode . 1) ((:file "/home/raxit/wrx/org/emacs menual.org") . 1)) ("ifdef" (nil . 1) (c++-mode . 1) ((:keyword "return") . 1) ((:file "/home/raxit/wrx/hello.cpp") . 1)) ("company-rtags" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("setq-default" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "with-eval-after-load") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-wordfreq" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-c-headers" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("cout" (nil . 2) (c++-mode . 2) ((:keyword "else") . 2) ((:file "/home/raxit/wrx/apple.cpp") . 2)) ("cout" (nil . 1) (c++-mode . 1) ((:keyword "else") . 1) ((:file "/home/raxit/wrx/apple.cpp") . 1)) ("company-complete" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("notes" (nil . 1) (org-mode . 1) ((:file "/home/raxit/.emacs.d/snippets/org-mode/me.org") . 1)) ("ivy-calling" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("previous" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "defun") . 1) ((:file "/home/raxit/.emacs") . 1)) ("counsel--call" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("counsel-irony" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("global-set-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/raxit/.emacs") . 1)) ("ivy-avy" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("use-package" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("ivy-hydra" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("ivy-reverse-i-search-map" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":bind" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("avy-goto-char" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "use-package") . 2) ((:file "/home/raxit/.emacs") . 2)) ("avy-goto-char" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("avy-goto-line" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("avy-goto-word-0" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("avy-resume" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-complete" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-complete" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-complete" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-complete" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-abbrev" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-shell-delete-duplicates" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("setq-local" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("delete-dups" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-local") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-file--keys-match-p" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-local") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-files" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-local") . 1) ((:file "/home/raxit/.emacs") . 1)) (":sepa" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-local") . 1) ((:file "/home/raxit/.emacs") . 1)) (":separate" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-local") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-dabbrev" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-local") . 1) ((:file "/home/raxit/.emacs") . 1)) ("add-hook" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "push") . 1) ((:file "/home/raxit/.emacs") . 2)) ("org-mode-hook" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "push") . 1) ((:file "/home/raxit/.emacs") . 2)) ("teddy-ma/org-buffer-setup" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "push") . 1) ((:file "/home/raxit/.emacs") . 1)) ("add-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/raxit/.emacs") . 1)) ("org-mode-hook" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/raxit/.emacs") . 1)) ("my/org-mode/load-prettify-symbols" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/raxit/.emacs") . 1)) ("load" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("load-theme" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-battery-charging" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("emojify-apropos-emoji" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("emojify-insert-emoji" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("always" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("eshell" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("eshell-aliases-file" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/undo-tree-hist" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/eshell/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/raxit/.emacs") . 2)) ("~/.emacs.d/var/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/eshell" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/raxit/.emacs") . 2)) ("eshell-directory-files" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/eshell/aliases" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("eshell-directory-name" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/eshell" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("concat" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("user-emacs-directory" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "setq") . 3) ((:file "/home/raxit/.emacs") . 3)) ("ivy-define-key" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "lambda") . 1) ((:file "/home/raxit/.emacs") . 1)) ("eshell-previous-prompt" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("eshell-previous-input-string" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("eshell-previous-input" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("user-emacs-directory" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("user-emacs-directory" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("solaire-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "require") . 1) ((:file "/home/raxit/.emacs") . 1)) ("uptime" (nil . 2) (eshell-mode . 2)) ("uptime" (nil . 1) (eshell-mode . 1)) ("zathura" (nil . 1) (eshell-mode . 1)) ("smooth-scroll" (nil . 1) (eshell-mode . 1)) ("counsel" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("swiper-isearch" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("user-emacs-directory" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("pkg" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("ibuffer" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) (":custom" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("ivy-posframe-border-width" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("title" (nil . 1) (conf-space-mode . 1) ((:file "/home/raxit/.config/yt-dlp/config") . 1)) ("playlist_index" (nil . 1) (conf-space-mode . 1) ((:file "/home/raxit/.config/yt-dlp/config") . 1)) ("default" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-yasnippet" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("company-complete-common-or-cycle" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "interactive") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-mode" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "use-package") . 3) ((:file "/home/raxit/.emacs") . 3)) ("after-init" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "use-package") . 2) ((:file "/home/raxit/.emacs") . 2)) ("doom-modeline" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 3) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("display-battery-mode" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/raxit/.emacs") . 2)) ("display-battery-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("display-time-default-load-average" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "with-temp-buffer") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("after-init" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-modeline-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("display-time-format" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "with-temp-buffer") . 1) ((:file "/home/raxit/.emacs") . 1)) ("display-time-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("~/.emacs.d/var/savehist.el" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("tool-bar-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "when") . 1) ((:file "/home/raxit/.emacs") . 1)) ("after-focus-change-function" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) (".emacs" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq-default") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-lock-comment-face" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 2)) (":family" (nil . 5) (emacs-lisp-mode . 5) ((:keyword "cond") . 2) ((:file "/home/raxit/.emacs") . 5)) (":height" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("italic" (nil . 4) (emacs-lisp-mode . 4) ((:keyword "cond") . 3) ((:file "/home/raxit/.emacs") . 4)) (":family" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Cantarell-Oblique" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-spec" (nil . 3) (emacs-lisp-mode . 3) ((:keyword "setq") . 3) ((:file "/home/raxit/.emacs") . 3)) (":family" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 3) ((:file "/home/raxit/.emacs") . 1)) ("Fantasque" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Sans" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Mono" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-spec" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":family" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Fira" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-spec" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":family" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Monaco-9" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":size" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-themes" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/raxit/.emacs") . 2)) ("doom-themes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-themes-enable-bold" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "setq") . 2) ((:file "/home/raxit/.emacs") . 2)) ("doom-themes-enable-bold" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("doom-themes-enable-italic" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("custom" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("custom-set-faces" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-lock-comment-face" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("italic" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) (":custom-face" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Oblique" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) (":slant" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "cond") . 2) ((:file "/home/raxit/.emacs") . 2)) ("italic" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) (":slant" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("italic" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) (":weight" (nil . 2) (emacs-lisp-mode . 2) ((:keyword "cond") . 2) ((:file "/home/raxit/.emacs") . 2)) ("medium" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("set-face-attribute" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-lock-add-keywords" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) (":weight" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("bold" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "cond") . 1) ((:file "/home/raxit/.emacs") . 1)) ("load" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("load-theme" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "setq") . 1) ((:file "/home/raxit/.emacs") . 1)) ("printf" (nil . 1) (c++-mode . 1) ((:keyword "for") . 1) ((:file "/home/raxit/wrx/hello.cpp") . 1)) ("undo-tree" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("undo-tree-mode" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) (":init" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("recentf-max-menu-items" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) (":config" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("font-face-attributes" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "use-package") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Fantasque" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Sans" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "progn") . 1) ((:file "/home/raxit/.emacs") . 1)) ("JetBrains" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "dolist") . 1) ((:file "/home/raxit/.emacs") . 1)) ("Mono" (nil . 1) (emacs-lisp-mode . 1) ((:keyword "dolist") . 1) ((:file "/home/raxit/.emacs") . 1))] company-statistics--index 0)