;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(counsel-git-history counsel-M-x-history swiper-history file-name-history ivy-history))
(setq counsel-git-history '(#("README.org" 0 10 (ivy-index 0))))
(setq counsel-M-x-history '(#("git" 0 3 (ivy-index 1)) "magit" "counsel-git"))
(setq swiper-history '(#("Note" 0 4 (ivy-index 0))))
(setq file-name-history '(#("/home/raxit/.emacs.d/README.org" 0 31 (ivy-index 12)) #("/home/raxit/mylist.txt" 0 22 (ivy-index 0)) #("/home/raxit/ffmpeg.org" 0 22 (ivy-index 0)) "~/Gargi.org" "~/Downloads/core.org" "~/cpp-mode.cpp" "~/.emacs" "~/.emacs.d/var/gamegrid-user-score/snake-scores" "~/wrx/yaho.cpp" "~/.emacs.d/etc/yasnippet/snippets/c++-mode/compi_structure" "~/.emacs.d/etc/yasnippet/snippets/org-mode/src-elisp" "~/.emacs.d/etc/yasnippet/snippets/org-mode/code" "~/wrx/new.cpp" "~/wrx/hello.cpp" "~/wrx/org/todo.org" "~/wrx/input.txt" "~/.emacs.d/elpa/yasnippet-20200604.246/yasnippet.el" "~/.emacs.d/var/gamegrid-user-score/tetris-scores" "~/draco-emacs/init.org" "~/.emacs.d/custom.el" "~/.notes" "~/.Xmodmap" "~/url_list.txt" "~/.cache/zsh/history" "~/.config/mpv/mpv.conf"))
(setq ivy-history '(#("/home/raxit/Gargi.org" 0 21 (ivy-index 3))))
(setq kill-ring '(#("iut" 0 3 (fontified t)) "The following one-liner works in bash (Mac, Linux) and does not require an intermediate file:

ffmpeg -f concat -safe 0 -i <(for f in ./*.mp4; do echo \"file '$PWD/$f'\"; done) -c copy output.mp4

Here, the <() syntax actually creates a temporary file \"in the background\" so to say" #("~cat 1.mpg 2.mpg | ffmpeg -f mpeg -i - -qscale 0 -vcodec mpeg4 output.mp4~" 0 1 (fontified t font-lock-multiline t org-emphasis t invisible t) 1 73 (fontified t face (org-code) font-lock-multiline t org-emphasis t) 73 74 (fontified t font-lock-multiline t org-emphasis t invisible t)) #("Notes:
start time before input file is faster.
start time after input file is accurate/precise.
" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 47 (fontified t) 47 95 (fontified t) 95 96 (fontified t)) #("use this" 0 3 (fontified t) 3 8 (fontified t)) #("ew" 0 2 (fontified t)) #("it " 0 3 (fontified t)) "ffmpeg -i 1.mp4 -qscale 0 1.mpg
ffmpeg -i 2.mp4 -qscale 0 2.mpg
cat 1.mpg 2.mpg | ffmpeg -f mpeg -i - -qscale 0 -vcodec mpeg4 output.mp4
ffmpeg -i myfile1.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts temp1.ts
ffmpeg -i myfile2.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts temp2.ts
ffmpeg -i \"concat:temp1.ts|temp2.ts\" -c copy -bsf:a aac_adtstoasc output.mp4

use this format: 
ffmpeg <start time> <input file> <cut duration> <out file>
eg. cut 60 second clip after 1 minute of video 
 ffmpeg -ss 00:01:00 -to 00:02:00  -i input.mp4 -c copy output.mp4 

 ffmpeg -i inputVideo.mp4 -ss 00:03 -to 00:08 -c:v libx264 -crf 30 trim_opseek_encode.mp4 

 ffmpeg -i movie.mp4 -ss 00:00:03 -t 00:00:08 -async 1 cut.mp4 

Notes:	
start time before input file is faster.
start time after input file is accurate/precise.
 ffmpeg -f pulse -ac 2 -i default -f x11grab -r 30 -s 1280x800 -i :0.0 -acodec pcm_s16le -vcodec libx264 -preset ultrafast -threads 0 -y ~/yt/recorded/$(date +%y-%m-%d).mkv\" 
"))
(setq search-ring 'nil)
(setq regexp-search-ring '("Note"))
