(undo-tree-save-format-version . 1)
"831e1f26a99976409ce37a7c38bf8c8be9350230"
[nil nil nil nil (25438 64731 684627 589000) 0 nil]
([nil nil ((#("int element;
  cin >> element;
  // Find an element using the `find' algorithm
  it = find(v.begin(), v.end(), element);

  // Checkif value was found
  if (it != v.end()) {
    // Determine position of element using std::distance
    int elementPosition = distance(v.begin(), it);
    cout << \"Value \" << *it;
    cout << \" found in the vector at position: \" << elementPosition << \"\\n\";
  }" 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 19 (fontified t) 19 21 (fontified t composition (5 2 [10219]) prettify-symbols-start 924 prettify-symbols-end 926) 21 31 (fontified t) 31 33 (fontified t c-in-sws t c-is-sws t) 33 34 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 34 36 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 36 67 (fontified t face font-lock-comment-face c-in-sws t) 67 68 (fontified t face font-lock-comment-face c-in-sws t) 68 79 (fontified t face font-lock-comment-face c-in-sws t) 79 81 (fontified t c-is-sws t c-in-sws t) 81 82 (fontified t c-is-sws t) 82 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-2-face)) 91 98 (fontified t) 98 99 (fontified t face (rainbow-delimiters-depth-3-face)) 99 100 (fontified t face (rainbow-delimiters-depth-3-face)) 100 107 (fontified t) 107 108 (fontified t face (rainbow-delimiters-depth-3-face)) 108 109 (fontified t face (rainbow-delimiters-depth-3-face)) 109 118 (fontified t) 118 119 (fontified t face (rainbow-delimiters-depth-2-face)) 119 122 (fontified t) 122 124 (fontified t c-in-sws t c-is-sws t) 124 125 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 125 127 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 127 151 (fontified t face font-lock-comment-face c-in-sws t) 151 153 (fontified t c-is-sws t c-in-sws t) 153 154 (fontified t face font-lock-keyword-face c-is-sws t) 154 155 (fontified t face font-lock-keyword-face) 155 156 (fontified t) 156 157 (fontified t face (rainbow-delimiters-depth-2-face)) 157 160 (fontified t) 160 162 (fontified t composition (6 2 [8800]) prettify-symbols-start 1065 prettify-symbols-end 1067) 162 168 (fontified t) 168 169 (fontified t face (rainbow-delimiters-depth-3-face)) 169 170 (fontified t face (rainbow-delimiters-depth-3-face)) 170 171 (fontified t face (rainbow-delimiters-depth-2-face)) 171 172 (fontified t) 172 173 (fontified t face (rainbow-delimiters-depth-2-face)) 173 174 (fontified t) 174 178 (fontified t c-in-sws t c-is-sws t) 178 179 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 179 181 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 181 231 (fontified t face font-lock-comment-face c-in-sws t) 231 235 (fontified t c-is-sws t c-in-sws t) 235 236 (fontified t c-is-sws t face font-lock-type-face) 236 237 (fontified t face font-lock-type-face) 237 238 (fontified t c-type c-decl-id-start face font-lock-type-face) 238 239 (fontified t) 239 254 (fontified t face font-lock-variable-name-face) 254 265 (fontified t) 265 266 (fontified t face (rainbow-delimiters-depth-3-face)) 266 273 (fontified t) 273 274 (fontified t face (rainbow-delimiters-depth-4-face)) 274 275 (fontified t face (rainbow-delimiters-depth-4-face)) 275 279 (fontified t) 279 280 (fontified t face (rainbow-delimiters-depth-3-face)) 280 291 (fontified t) 291 293 (fontified t composition (4 2 [10218]) prettify-symbols-start 1196 prettify-symbols-end 1198) 293 294 (fontified t) 294 302 (fontified t face font-lock-string-face) 302 303 (fontified t) 303 305 (fontified t composition (4 2 [10218]) prettify-symbols-start 1208 prettify-symbols-end 1210) 305 320 (fontified t) 320 322 (fontified t composition (4 2 [10218]) prettify-symbols-start 1225 prettify-symbols-end 1227) 322 323 (fontified t) 323 359 (fontified t face font-lock-string-face) 359 360 (fontified t) 360 362 (fontified t composition (4 2 [10218]) prettify-symbols-start 1265 prettify-symbols-end 1267) 362 379 (fontified t) 379 381 (fontified t composition (4 2 [10218]) prettify-symbols-start 1284 prettify-symbols-end 1286) 381 382 (fontified t) 382 386 (fontified t face font-lock-string-face) 386 390 (fontified t) 390 391 (fontified t face (rainbow-delimiters-depth-2-face))) . 905) (undo-tree-id13 . -388) (undo-tree-id14 . -391) (undo-tree-id15 . -391) (undo-tree-id16 . 1) (undo-tree-id17 . -391) (undo-tree-id18 . 219) (undo-tree-id19 . -173) 1296 (t 25438 10790 211935 266000)) nil (25438 64731 684620 815000) 0 nil])
([nil nil ((912 . 916) (#("  " 0 2 (fontified t)) . -912) (902 . 904) (902 . 906)) nil (25438 64731 684597 627000) 0 nil])
([nil nil ((908 . 911)) nil (25438 64731 684590 364000) 0 nil])
([nil nil ((908 . 916) (#("ele" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face)) . -908) (undo-tree-id11 . -3) (undo-tree-id12 . -3) 911) nil (25438 64731 684584 218000) 0 nil])
([nil nil ((916 . 917)) nil (25438 64731 684572 205000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -916) (undo-tree-id10 . -1) 917) nil (25438 64731 684566 129000) 0 nil])
([nil nil ((921 . 923) (#("    " 0 4 (fontified t)) . -921) (916 . 917)) nil (25438 64731 684556 770000) 0 nil])
([nil nil ((917 . 920)) nil (25438 64731 684550 345000) 0 nil])
([nil nil ((927 . 931) (#("  " 0 2 (fontified t)) . -927) (920 . 923)) nil (25438 64731 684544 339000) 0 nil])
([nil nil ((932 . 934) (#("    " 0 4 (fontified t)) . -932) (apply yas--snippet-revive 920 928 #s(yas--snippet nil nil #s(yas--exit 927 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 927 nil) 0 nil nil nil nil)) (920 . 928) (#("cin" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 920) (undo-tree-id8 . -2) (undo-tree-id9 . -3) 923) nil (25438 64731 684536 27000) 0 nil])
([nil nil ((927 . 930)) nil (25438 64731 684521 500000) 0 nil])
([nil nil ((927 . 935) (#("ele" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -927) (undo-tree-id6 . -3) (undo-tree-id7 . -3) 930) nil (25438 64731 684515 215000) 0 nil])
([nil nil ((936 . 937)) nil (25438 64731 684503 412000) 0 nil])
([nil nil ((942 . 948) (946 . 950) (#("  " 0 2 (fontified t)) . -946) (937 . 939) (937 . 940)) nil (25438 64731 684497 266000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -947) (undo-tree-id5 . -1) 948) nil (25438 64731 684488 256000) 0 nil])
([nil nil ((947 . 948)) nil (25438 64731 684479 456000) 0 nil])
([nil nil ((948 . 950)) nil (25438 64731 684474 427000) 0 nil])
([nil nil ((949 . 954)) nil (25438 64731 684469 259000) 0 nil])
([nil nil ((951 . 956) (#("beg" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -951) (undo-tree-id3 . -3) (undo-tree-id4 . -3) 954) nil (25438 64731 684462 834000) 0 nil])
([nil nil ((956 . 958)) nil (25438 64731 684450 961000) 0 nil])
([nil nil ((958 . 959)) nil (25438 64731 684445 862000) 0 nil])
([nil nil ((959 . 965)) nil (25438 64731 684441 253000) 0 nil])
([nil nil ((965 . 967)) nil (25438 64731 684435 945000) 0 nil])
([nil nil ((967 . 968)) nil (25438 64731 684430 846000) 0 nil])
([nil nil ((968 . 969)) nil (25438 64731 684425 539000) 0 nil])
([nil nil ((969 . 972)) nil (25438 64731 684420 161000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -971) (undo-tree-id2 . -1) 972) nil (25438 64731 684414 15000) 0 nil])
([nil nil ((971 . 972)) nil (25438 64731 684404 586000) 0 nil])
([nil nil ((969 . 977) (#("ele" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -969) (undo-tree-id0 . -3) (undo-tree-id1 . -3) 972) nil (25438 64731 684397 532000) 0 nil])
([nil nil ((983 . 985) (#("    " 0 4 (fontified t)) . -983) (978 . 979)) nil (25438 64731 684329 227000) 0 nil])
([nil nil ((979 . 982)) nil (25438 64732 532076 850000) 0 nil])
([nil nil ((982 . 984)) nil (25438 64765 705386 6000) 0 nil] [nil nil ((989 . 993) (#("  " 0 2 (fontified t)) . -989) (982 . 985)) ((#("if " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 982) (undo-tree-id22 . -2) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (989 . 991) (#("    " 0 4 (fontified t)) . 989)) (25438 64731 688023 133000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 986 999 nil nil nil t #s(yas--field 2 1001 1011 nil nil nil nil #s(yas--exit 1007 nil))) #s(yas--field 2 1001 1011 nil nil nil nil #s(yas--exit 1007 nil))) #s(yas--exit 1007 nil) 2 nil #s(yas--field 1 986 999 nil nil nil t #s(yas--field 2 1001 1011 nil nil nil nil #s(yas--exit 1007 nil))) nil nil)) (1004 . 1006) (982 . 1005) (#("if" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face)) . 982) (undo-tree-id82 . -2) (undo-tree-id83 . -2) 984) nil (25438 64775 967071 217000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 986 986 nil nil nil t #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--exit 1003 nil) 1 nil #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil)) nil nil)) (1004 . 1006) (982 . 1005) (#("if" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face)) . 982) (undo-tree-id42 . -2) (undo-tree-id43 . -2) 984) ((982 . 984) (#("if (condition) {
    
}" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 22 (fontified t) 22 23 (fontified nil face (rainbow-delimiters-depth-2-face))) . 982) (undo-tree-id51 . -17) (undo-tree-id52 . -4) (undo-tree-id53 . -15) (undo-tree-id54 . -4) (undo-tree-id55 . -15) (undo-tree-id56 . -15) (undo-tree-id57 . -15) (undo-tree-id58 . -15) (undo-tree-id59 . -15) (undo-tree-id60 . -15) (undo-tree-id61 . -15) (undo-tree-id62 . -15) (undo-tree-id63 . -15) (undo-tree-id64 . -15) (undo-tree-id65 . -15) (undo-tree-id66 . 8) (undo-tree-id67 . -16) (undo-tree-id68 . 1) (undo-tree-id69 . -23) (undo-tree-id70 . -15) (undo-tree-id71 . -15) (undo-tree-id72 . -15) (undo-tree-id73 . -15) (undo-tree-id74 . -15) (undo-tree-id75 . -15) (#("  " 0 2 (fontified t)) . 1004) (apply yas--snippet-revive 982 1007 #s(yas--snippet nil (#s(yas--field 1 986 986 nil nil nil t #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--exit 1003 nil) 1 nil #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil)) nil nil))) (25438 64765 103632 818000) 0 nil])
([nil nil ((985 . 987)) ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face))) . 985) (undo-tree-id20 . -1) (undo-tree-id21 . -1)) (25438 64731 684301 919000) 0 nil])
([nil nil ((987 . 988) (#("condition" 0 9 (fontified nil)) . 987) (undo-tree-id81 . -9) (986 . 987)) nil (25438 64775 967056 690000) 0 nil])
([nil nil ((apply yas--snippet-revive 982 1007 #s(yas--snippet nil (#s(yas--field 1 986 986 nil nil nil t #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--exit 1003 nil) 1 nil #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 986 986 nil nil nil t #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--exit 1003 nil) 1 nil #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil)) nil nil))) (25438 64765 103526 310000) 0 nil] [nil nil ((987 . 999) (#("condition" 0 9 (fontified nil)) . 987) (986 . 987)) ((#("i" 0 1 (fontified nil)) . 986) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (987 . 996) (#("t != element" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t composition (6 2 [8800]) prettify-symbols-start 989 prettify-symbols-end 991) 3 4 (fontified t composition (6 2 [8800]) prettify-symbols-start 989 prettify-symbols-end 991) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 987) (undo-tree-id48 . -12) (undo-tree-id49 . -12) (undo-tree-id50 . -12)) (25438 64760 296059 41000) 0 nil])
nil
([nil nil ((#("u" 0 1 (fontified t)) . -986) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("t" 0 1 (fontified t)) . -987) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 988) nil (25438 64779 290330 45000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 982 1011 #s(yas--snippet nil (#s(yas--field 1 986 986 nil nil nil t #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--exit 1003 nil) 1 nil #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 986 986 nil nil nil t #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil))) #s(yas--exit 1003 nil) 1 nil #s(yas--field 2 997 1007 nil nil nil nil #s(yas--exit 1003 nil)) nil nil))) (25438 64760 295935 353000) 0 nil] [nil nil ((992 . 1000) (#("element" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -992) (undo-tree-id37 . -7) (undo-tree-id38 . -7) (undo-tree-id39 . -7) (undo-tree-id40 . -7) 999) ((992 . 999) (#("elements" 0 8 (fontified t)) . 992) (undo-tree-id44 . -8)) (25438 64759 584901 148000) 0 nil])
([nil nil ((986 . 991)) nil (25438 64929 164860 574000) 0 nil] [nil nil ((986 . 989)) ((#("ut " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 986) (undo-tree-id88 . -1) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3)) (25438 64779 287494 0) 0 nil] [nil nil ((986 . 992)) ((#("it !- " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t face font-lock-negation-char-face) 4 5 (fontified t) 5 6 (fontified t)) . 986) (undo-tree-id84 . -2) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6)) (25438 64775 967001 935000) 0 nil])
nil
nil
([nil nil ((#("-" 0 1 (fontified t)) . -990) (undo-tree-id100 . -1) 991) nil (25438 64929 164853 589000) 0 nil])
nil
nil
([nil nil ((990 . 992)) nil (25438 64929 164843 113000) 0 nil])
([nil nil ((992 . 997)) nil (25438 64929 164837 456000) 0 nil])
([nil nil ((997 . 999)) nil (25438 64929 164831 869000) 0 nil])
([nil nil ((apply yas--snippet-revive 982 1011 #s(yas--snippet nil (#s(yas--field 1 986 999 nil nil nil t #s(yas--field 2 1001 1011 nil nil nil nil #s(yas--exit 1007 nil))) #s(yas--field 2 1001 1011 nil nil nil nil #s(yas--exit 1007 nil))) #s(yas--exit 1007 nil) 2 nil #s(yas--field 1 986 999 nil nil nil t #s(yas--field 2 1001 1011 nil nil nil nil #s(yas--exit 1007 nil))) nil nil))) nil (25438 64929 164826 142000) 0 nil])
([nil nil ((1007 . 1011)) nil (25438 64929 164820 66000) 0 nil])
([nil nil ((#("g" 0 1 (fontified nil)) . -1011) (1011 . 1012)) nil (25438 64929 164813 850000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1015 1030 nil nil nil t #s(yas--field 2 1035 1037 nil nil nil nil nil)) #s(yas--field 2 1035 1037 nil nil nil nil nil)) #s(yas--exit 1015 #s(yas--field 1 1015 1030 nil nil nil t #s(yas--field 2 1035 1037 nil nil nil nil nil))) 8 nil #s(yas--field 1 1015 1030 nil nil nil t #s(yas--field 2 1035 1037 nil nil nil nil nil)) nil nil)) (1007 . 1025) (#("cout" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 1007) (undo-tree-id98 . -4) (undo-tree-id99 . -4) 1011) nil (25438 64929 164805 748000) 0 nil])
([nil nil ((1023 . 1024) (nil syntax-table nil 1032 . 1033) (nil syntax-table (1) 1030 . 1031) (1022 . 1023) (nil syntax-table nil 1031 . 1032) (nil syntax-table (1) 1029 . 1030) (1021 . 1022) (nil syntax-table nil 1030 . 1031) (nil syntax-table (1) 1028 . 1029) (1020 . 1021) (nil syntax-table nil 1029 . 1030) (nil syntax-table (1) 1027 . 1028) (1019 . 1020) (nil syntax-table nil 1028 . 1029) (nil syntax-table (1) 1026 . 1027) (1018 . 1019) (nil syntax-table nil 1027 . 1028) (nil syntax-table (1) 1025 . 1026) (1017 . 1018) (nil syntax-table nil 1026 . 1027) (nil syntax-table (1) 1024 . 1025) (1016 . 1017) (nil syntax-table nil 1025 . 1026) (nil syntax-table (1) 1023 . 1024) (1015 . 1016) (#("\"" 0 1 (fontified nil)) . -1015) (nil syntax-table nil 1025 . 1026) (nil syntax-table (1) 1023 . 1024) (1015 . 1016)) nil (25438 64929 164787 729000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . -1023) (undo-tree-id97 . -1) (nil syntax-table nil 1033 . 1034) (nil syntax-table (1) 1031 . 1032)) nil (25438 64929 164760 282000) 0 nil])
([nil nil ((1025 . 1026) (nil syntax-table nil 1034 . 1035) (nil syntax-table (1) 1032 . 1033) (1024 . 1025) (nil syntax-table nil 1033 . 1034) (nil syntax-table (1) 1031 . 1032) (1023 . 1024) (nil syntax-table nil 1032 . 1033) (nil syntax-table (1) 1030 . 1031)) nil (25438 64929 164748 339000) 0 nil])
([nil nil ((1027 . 1028) (nil syntax-table nil 1036 . 1037) (nil syntax-table (1) 1034 . 1035) (1026 . 1027) (nil syntax-table nil 1035 . 1036) (nil syntax-table (1) 1033 . 1034)) nil (25438 64929 164736 186000) 0 nil])
([nil nil ((1028 . 1029) (nil syntax-table nil 1037 . 1038) (nil syntax-table (1) 1035 . 1036)) nil (25438 64929 164726 478000) 0 nil])
([nil nil ((1025 . 1026) (nil syntax-table nil 1038 . 1039) (nil syntax-table (1) 1036 . 1037) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -1025) (1025 . 1026) (nil syntax-table nil 1038 . 1039) (nil syntax-table (1) 1036 . 1037)) nil (25438 64929 164717 958000) 0 nil])
([nil nil ((apply yas--snippet-revive 1007 1040 #s(yas--snippet nil (#s(yas--field 1 1015 1030 nil nil nil t #s(yas--field 2 1035 1037 nil nil nil nil nil)) #s(yas--field 2 1035 1037 nil nil nil nil nil)) #s(yas--exit 1015 #s(yas--field 1 1015 1030 nil nil nil t #s(yas--field 2 1035 1037 nil nil nil nil nil))) 8 nil #s(yas--field 1 1015 1030 nil nil nil t #s(yas--field 2 1035 1037 nil nil nil nil nil)) nil nil))) nil (25438 64929 164707 342000) 0 nil])
([nil nil ((1031 . 1032)) nil (25438 64929 164701 824000) 0 nil])
([nil nil ((1032 . 1035)) nil (25438 64929 164696 167000) 0 nil])
([nil nil ((1035 . 1037)) nil (25438 64929 164690 580000) 0 nil])
([nil nil ((1037 . 1038)) nil (25438 64929 164685 62000) 0 nil])
([nil nil ((1044 . 1045) (nil syntax-table nil 1052 . 1053) (nil syntax-table (1) 1050 . 1051) (1043 . 1044) (nil syntax-table nil 1051 . 1052) (nil syntax-table (1) 1049 . 1050) (1042 . 1043) (nil syntax-table nil 1050 . 1051) (nil syntax-table (1) 1048 . 1049) (1041 . 1042) (nil syntax-table nil 1049 . 1050) (nil syntax-table (1) 1047 . 1048) (1040 . 1041) (nil syntax-table nil 1048 . 1049) (nil syntax-table (1) 1046 . 1047) (1039 . 1040) (nil syntax-table nil 1047 . 1048) (nil syntax-table (1) 1045 . 1046) (1038 . 1039) (#("\"" 0 1 (fontified nil)) . -1038) (nil syntax-table nil 1047 . 1048) (nil syntax-table (1) 1045 . 1046) (1038 . 1039)) nil (25438 64929 164676 262000) 0 nil])
([nil nil ((1039 . 1040) (nil syntax-table nil 1053 . 1054) (nil syntax-table (1) 1051 . 1052)) nil (25438 64929 164653 704000) 0 nil])
([nil nil ((1048 . 1049) (nil syntax-table nil 1057 . 1058) (nil syntax-table (1) 1055 . 1056) (1047 . 1048) (nil syntax-table nil 1056 . 1057) (nil syntax-table (1) 1054 . 1055) (1046 . 1047) (nil syntax-table nil 1055 . 1056) (nil syntax-table (1) 1053 . 1054) (1045 . 1046) (nil syntax-table nil 1054 . 1055) (nil syntax-table (1) 1052 . 1053)) nil (25438 64929 164645 113000) 0 nil])
([nil nil ((1057 . 1058) (nil syntax-table nil 1066 . 1067) (nil syntax-table (1) 1064 . 1065) (1056 . 1057) (nil syntax-table nil 1065 . 1066) (nil syntax-table (1) 1063 . 1064) (1055 . 1056) (nil syntax-table nil 1064 . 1065) (nil syntax-table (1) 1062 . 1063) (1054 . 1055) (nil syntax-table nil 1063 . 1064) (nil syntax-table (1) 1061 . 1062) (1053 . 1054) (nil syntax-table nil 1062 . 1063) (nil syntax-table (1) 1060 . 1061) (1052 . 1053) (nil syntax-table nil 1061 . 1062) (nil syntax-table (1) 1059 . 1060) (1051 . 1052) (nil syntax-table nil 1060 . 1061) (nil syntax-table (1) 1058 . 1059) (1050 . 1051) (nil syntax-table nil 1059 . 1060) (nil syntax-table (1) 1057 . 1058) (1049 . 1050) (nil syntax-table nil 1058 . 1059) (nil syntax-table (1) 1056 . 1057)) nil (25438 64929 164628 72000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -1057) (undo-tree-id96 . -1) (nil syntax-table nil 1067 . 1068) (nil syntax-table (1) 1065 . 1066)) nil (25438 64929 164602 91000) 0 nil])
([nil nil ((1057 . 1058) (nil syntax-table nil 1066 . 1067) (nil syntax-table (1) 1064 . 1065) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -1057) (1057 . 1058) (nil syntax-table nil 1066 . 1067) (nil syntax-table (1) 1064 . 1065)) nil (25438 64929 164590 218000) 0 nil])
([nil nil ((1057 . 1058)) nil (25438 64929 164580 91000) 0 nil])
([nil nil ((1058 . 1059)) nil (25438 64929 164574 364000) 0 nil])
([nil nil ((1060 . 1061)) nil (25438 64929 164568 567000) 0 nil])
([nil nil ((1061 . 1063)) nil (25438 64929 164563 50000) 0 nil])
([nil nil ((1063 . 1065)) nil (25438 64929 164557 532000) 0 nil])
([nil nil ((1065 . 1072)) nil (25438 64929 164552 15000) 0 nil])
([nil nil ((1072 . 1074)) nil (25438 64929 164546 358000) 0 nil])
([nil nil ((1073 . 1077)) nil (25438 64929 164540 840000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1076) (undo-tree-id95 . -1) 1077) nil (25438 64929 164533 926000) 0 nil])
([nil nil ((1076 . 1078)) nil (25438 64929 164523 869000) 0 nil])
([nil nil ((1075 . 1080) (#("beg" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1075) (undo-tree-id93 . -3) (undo-tree-id94 . -3) 1078) nil (25438 64929 164516 745000) 0 nil])
([nil nil ((1080 . 1082)) nil (25438 64929 164502 916000) 0 nil])
([nil nil ((1082 . 1083)) nil (25438 64929 164497 50000) 0 nil])
([nil nil ((1083 . 1084)) nil (25438 64929 164491 462000) 0 nil])
([nil nil ((1084 . 1086)) nil (25438 64929 164485 107000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1102) (undo-tree-id92 . -2) 1087) nil (25438 65172 132412 801000) 0 nil])
([nil nil ((#("  vi :: iterator it = v.begin();
" 0 2 (c-is-sws t c-in-sws t fontified t) 2 3 (c-is-sws t fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 8 (fontified t) 8 15 (fontified t face font-lock-type-face) 15 16 (fontified t c-type c-decl-id-start face font-lock-type-face) 16 17 (fontified t) 17 19 (fontified t face font-lock-variable-name-face) 19 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-2-face)) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 33 (fontified t)) . 747) (undo-tree-id227 . -33) (undo-tree-id228 . -33) (t 25438 64929 394016 343000)) nil (25438 65501 70527 5000) 0 nil] [nil nil ((783 . 785) (851 . 855) (#("  " 0 2 (fontified t)) . 851) (839 . 845) (#("    " 0 4 (fontified t)) . 839) (812 . 818) (#("    " 0 4 (fontified t)) . 812) (784 . 788) (#("  " 0 2 (fontified t)) . -784) (780 . 782) (780 . 781) (t 25438 64929 394016 343000)) ((#("i" 0 1 (fontified nil)) . 780) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("  " 0 2 (fontified nil)) . 780) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (784 . 786) (#("    " 0 4 (fontified nil)) . 784) (812 . 816) (#("      " 0 6 (fontified t)) . 812) (839 . 843) (#("      " 0 6 (fontified t)) . 839) (851 . 853) (#("    " 0 4 (fontified t)) . 851) (#("tr" 0 1 (fontified t) 1 2 (fontified t)) . 783) (undo-tree-id207 . -1) (undo-tree-id208 . -2) (undo-tree-id209 . -1) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2)) (25438 65171 348995 921000) 0 nil] [nil nil ((1087 . 1094) (#(" << \"\\n" 0 1 (fontified t) 1 3 (fontified t composition (4 2 [10218]) prettify-symbols-start 1088 prettify-symbols-end 1090) 3 4 (fontified t) 4 5 (fontified t face font-lock-string-face) 5 7 (fontified t face font-lock-string-face)) . 1087) (t 25438 64929 394016 343000)) ((1087 . 1094) (nil syntax-table nil 1089 . 1090) (nil syntax-table (1) 1087 . 1088) (#(" << \"\\n" 0 1 (fontified t) 1 3 (fontified t composition (4 2 [10218]) prettify-symbols-start 1088 prettify-symbols-end 1090) 3 4 (fontified t) 4 5 (fontified t face font-lock-string-face) 5 7 (fontified t face font-lock-string-face)) . 1087) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (undo-tree-id170 . -7) (undo-tree-id171 . -7) (undo-tree-id172 . -7) (undo-tree-id173 . -7) (undo-tree-id174 . -7) (undo-tree-id175 . -7) (undo-tree-id176 . -7) (undo-tree-id177 . -7) (undo-tree-id178 . -7) (undo-tree-id179 . -7) (undo-tree-id180 . -7)) (25438 65060 552424 814000) 0 nil])
([nil nil ((750 . 763) (818 . 822) (#("  " 0 2 (fontified t)) . 818) (806 . 812) (#("    " 0 4 (fontified t)) . 806) (779 . 785) (#("    " 0 4 (fontified t)) . 779) (751 . 755) (#("  " 0 2 (c-is-sws t fontified nil)) . -751) (747 . 749) (747 . 748)) nil (25438 65501 70513 386000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -784) (undo-tree-id181 . -1) 785) ((784 . 785)) (25438 65169 490817 750000) 0 nil])
([nil nil ((1094 . 1111) (#("\";

  }

  return" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t) 8 9 (fontified t) 9 11 (fontified t) 11 17 (fontified t face font-lock-keyword-face)) . 1094)) ((1094 . 1111) (nil syntax-table nil 1097 . 1098) (nil syntax-table (1) 1091 . 1092) (#("\";

  }

  return" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t) 8 9 (fontified t) 9 11 (fontified t) 11 17 (fontified t face font-lock-keyword-face)) . 1094) (undo-tree-id119 . -8) (undo-tree-id120 . -17) (undo-tree-id121 . -9) (undo-tree-id122 . -17) (undo-tree-id123 . -17) (undo-tree-id124 . -17) (undo-tree-id125 . -17) (undo-tree-id126 . -17) (undo-tree-id127 . -17) (undo-tree-id128 . -17) (undo-tree-id129 . -17) (undo-tree-id130 . -17) (undo-tree-id131 . -17) (undo-tree-id132 . -9) (undo-tree-id133 . -17) (undo-tree-id134 . -17) (undo-tree-id135 . -17) (undo-tree-id136 . -17) (undo-tree-id137 . -17) (undo-tree-id138 . -17) (undo-tree-id139 . -17)) (25438 65060 113998 837000) 0 nil])
([nil nil ((761 . 766) (#("be" 0 1 (fontified t) 1 2 (fontified t)) . -761) (undo-tree-id225 . -2) (undo-tree-id226 . -2) 763) nil (25438 65501 70499 977000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 782 787 nil nil nil nil #s(yas--field 2 787 798 nil nil nil nil #s(yas--field 3 809 813 nil nil nil nil nil))) #s(yas--field 2 787 798 nil nil nil nil #s(yas--field 3 809 813 nil nil nil nil nil)) #s(yas--field 3 809 813 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 782 787 nil nil nil nil #s(yas--field 2 787 798 nil nil nil nil #s(yas--field 3 809 813 nil nil nil nil nil))) nil nil)) (782 . 815) (#("iter" 0 4 (fontified nil)) . 782) (782 . 786) (#("it" 0 1 (fontified t) 1 2 (fontified t)) . -782) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) 784) ((782 . 784) (#("iter" 0 4 (fontified nil)) . 782) (782 . 786) (#("std::vector<int>::iterator iter;
" 0 3 (fontified t face font-lock-constant-face) 3 5 (fontified t) 5 11 (fontified t face font-lock-constant-face) 11 12 (syntax-table (4 . 62) fontified t composition (1 1 [10216]) prettify-symbols-start 793 prettify-symbols-end 794 face (rainbow-delimiters-depth-2-face)) 12 15 (fontified t face font-lock-type-face) 15 16 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-2-face)) 16 18 (fontified t) 18 25 (fontified t face font-lock-type-face) 25 26 (fontified t c-type c-decl-id-start face font-lock-type-face) 26 27 (fontified t) 27 31 (fontified t face font-lock-variable-name-face) 31 33 (fontified t)) . 782) (undo-tree-id188 . -33) (apply yas--snippet-revive 782 815 #s(yas--snippet nil (#s(yas--field 1 782 787 nil nil nil nil #s(yas--field 2 787 798 nil nil nil nil #s(yas--field 3 809 813 nil nil nil nil nil))) #s(yas--field 2 787 798 nil nil nil nil #s(yas--field 3 809 813 nil nil nil nil nil)) #s(yas--field 3 809 813 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 782 787 nil nil nil nil #s(yas--field 2 787 798 nil nil nil nil #s(yas--field 3 809 813 nil nil nil nil nil))) nil nil))) (25438 65169 482858 776000) 0 nil] [nil nil ((784 . 787)) ((#("era" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 784) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3)) (25438 65152 298381 783000) 0 nil])
([nil nil ((1111 . 1113) (#(" 0" 0 2 (fontified t)) . 1111)) ((1111 . 1113) (#(" 0" 0 2 (fontified t)) . 1111) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2)) (25438 65059 834181 452000) 0 nil])
([nil nil ((766 . 768)) nil (25438 65501 70487 545000) 0 nil])
nil
nil
([nil nil ((1113 . 1117) (#(";
}
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 4 (fontified t)) . 1113)) ((1113 . 1117) (#(";
}
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 4 (fontified t)) . 1113) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4)) (25438 65059 827122 453000) 0 nil])
([nil nil ((831 . 833) (#("    " 0 4 (fontified t)) . 831) (821 . 825) (#("      " 0 6 (fontified t)) . 821) (796 . 800) (#("      " 0 6 (fontified t)) . 796) (770 . 772) (#("    " 0 4 (fontified t)) . -770) (768 . 769)) nil (25438 65501 70480 142000) 0 nil])
nil
([nil nil ((769 . 772)) nil (25438 65501 70468 618000) 0 nil])
([nil current ((#("  " 0 2 (fontified t)) . 770) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -2) 772) nil (25438 65501 70457 792000) 0 nil])
nil
